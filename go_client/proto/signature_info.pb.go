// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.6.1
// source: signature_info.proto

package resdb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SignatureInfo_HashType int32

const (
	SignatureInfo_NONE     SignatureInfo_HashType = 0
	SignatureInfo_RSA      SignatureInfo_HashType = 1
	SignatureInfo_ED25519  SignatureInfo_HashType = 2
	SignatureInfo_CMAC_AES SignatureInfo_HashType = 3
	SignatureInfo_ECDSA    SignatureInfo_HashType = 4
)

// Enum value maps for SignatureInfo_HashType.
var (
	SignatureInfo_HashType_name = map[int32]string{
		0: "NONE",
		1: "RSA",
		2: "ED25519",
		3: "CMAC_AES",
		4: "ECDSA",
	}
	SignatureInfo_HashType_value = map[string]int32{
		"NONE":     0,
		"RSA":      1,
		"ED25519":  2,
		"CMAC_AES": 3,
		"ECDSA":    4,
	}
)

func (x SignatureInfo_HashType) Enum() *SignatureInfo_HashType {
	p := new(SignatureInfo_HashType)
	*p = x
	return p
}

func (x SignatureInfo_HashType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignatureInfo_HashType) Descriptor() protoreflect.EnumDescriptor {
	return file_signature_info_proto_enumTypes[0].Descriptor()
}

func (SignatureInfo_HashType) Type() protoreflect.EnumType {
	return &file_signature_info_proto_enumTypes[0]
}

func (x SignatureInfo_HashType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignatureInfo_HashType.Descriptor instead.
func (SignatureInfo_HashType) EnumDescriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{0, 0}
}

type CertificateKeyInfo_Type int32

const (
	CertificateKeyInfo_REPLICA CertificateKeyInfo_Type = 0
	CertificateKeyInfo_CLIENT  CertificateKeyInfo_Type = 1
)

// Enum value maps for CertificateKeyInfo_Type.
var (
	CertificateKeyInfo_Type_name = map[int32]string{
		0: "REPLICA",
		1: "CLIENT",
	}
	CertificateKeyInfo_Type_value = map[string]int32{
		"REPLICA": 0,
		"CLIENT":  1,
	}
)

func (x CertificateKeyInfo_Type) Enum() *CertificateKeyInfo_Type {
	p := new(CertificateKeyInfo_Type)
	*p = x
	return p
}

func (x CertificateKeyInfo_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateKeyInfo_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_signature_info_proto_enumTypes[1].Descriptor()
}

func (CertificateKeyInfo_Type) Type() protoreflect.EnumType {
	return &file_signature_info_proto_enumTypes[1]
}

func (x CertificateKeyInfo_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateKeyInfo_Type.Descriptor instead.
func (CertificateKeyInfo_Type) EnumDescriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{3, 0}
}

type SignatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HashType  SignatureInfo_HashType `protobuf:"varint,1,opt,name=hash_type,json=hashType,proto3,enum=resdb.SignatureInfo_HashType" json:"hash_type,omitempty"`
	NodeId    int64                  `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Signature []byte                 `protobuf:"bytes,3,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *SignatureInfo) Reset() {
	*x = SignatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInfo) ProtoMessage() {}

func (x *SignatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInfo.ProtoReflect.Descriptor instead.
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{0}
}

func (x *SignatureInfo) GetHashType() SignatureInfo_HashType {
	if x != nil {
		return x.HashType
	}
	return SignatureInfo_NONE
}

func (x *SignatureInfo) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *SignatureInfo) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type SecretKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey  []byte                 `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	PrivateKey []byte                 `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`
	HashType   SignatureInfo_HashType `protobuf:"varint,3,opt,name=hash_type,json=hashType,proto3,enum=resdb.SignatureInfo_HashType" json:"hash_type,omitempty"`
}

func (x *SecretKey) Reset() {
	*x = SecretKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SecretKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SecretKey) ProtoMessage() {}

func (x *SecretKey) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SecretKey.ProtoReflect.Descriptor instead.
func (*SecretKey) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{1}
}

func (x *SecretKey) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *SecretKey) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SecretKey) GetHashType() SignatureInfo_HashType {
	if x != nil {
		return x.HashType
	}
	return SignatureInfo_NONE
}

type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key      []byte                 `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	HashType SignatureInfo_HashType `protobuf:"varint,2,opt,name=hash_type,json=hashType,proto3,enum=resdb.SignatureInfo_HashType" json:"hash_type,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{2}
}

func (x *KeyInfo) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyInfo) GetHashType() SignatureInfo_HashType {
	if x != nil {
		return x.HashType
	}
	return SignatureInfo_NONE
}

type CertificateKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *KeyInfo                `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	NodeId int64                   `protobuf:"varint,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Type   CertificateKeyInfo_Type `protobuf:"varint,3,opt,name=type,proto3,enum=resdb.CertificateKeyInfo_Type" json:"type,omitempty"`
	Ip     string                  `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Port   int32                   `protobuf:"varint,5,opt,name=port,proto3" json:"port,omitempty"` // the ip:port the replica uses, if it is a client node, can be ignored.
}

func (x *CertificateKeyInfo) Reset() {
	*x = CertificateKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateKeyInfo) ProtoMessage() {}

func (x *CertificateKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateKeyInfo.ProtoReflect.Descriptor instead.
func (*CertificateKeyInfo) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateKeyInfo) GetKey() *KeyInfo {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *CertificateKeyInfo) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *CertificateKeyInfo) GetType() CertificateKeyInfo_Type {
	if x != nil {
		return x.Type
	}
	return CertificateKeyInfo_REPLICA
}

func (x *CertificateKeyInfo) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CertificateKeyInfo) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CertificateKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKeyInfo *CertificateKeyInfo `protobuf:"bytes,1,opt,name=public_key_info,json=publicKeyInfo,proto3" json:"public_key_info,omitempty"` // the public key of current node.
	Certificate   *SignatureInfo      `protobuf:"bytes,2,opt,name=certificate,proto3" json:"certificate,omitempty"`                            // the certificate of `public_key_info`.
}

func (x *CertificateKey) Reset() {
	*x = CertificateKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateKey) ProtoMessage() {}

func (x *CertificateKey) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateKey.ProtoReflect.Descriptor instead.
func (*CertificateKey) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{4}
}

func (x *CertificateKey) GetPublicKeyInfo() *CertificateKeyInfo {
	if x != nil {
		return x.PublicKeyInfo
	}
	return nil
}

func (x *CertificateKey) GetCertificate() *SignatureInfo {
	if x != nil {
		return x.Certificate
	}
	return nil
}

// CertificateInfo is published from the adminisotr and will be written to a cert file.
type CertificateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPublicKey *KeyInfo        `protobuf:"bytes,1,opt,name=admin_public_key,json=adminPublicKey,proto3" json:"admin_public_key,omitempty"` // the public key owned by the administor.
	PublicKey      *CertificateKey `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`                  // public key info with certificate.
	NodeId         int64           `protobuf:"varint,4,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
}

func (x *CertificateInfo) Reset() {
	*x = CertificateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertificateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateInfo) ProtoMessage() {}

func (x *CertificateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateInfo.ProtoReflect.Descriptor instead.
func (*CertificateInfo) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{5}
}

func (x *CertificateInfo) GetAdminPublicKey() *KeyInfo {
	if x != nil {
		return x.AdminPublicKey
	}
	return nil
}

func (x *CertificateInfo) GetPublicKey() *CertificateKey {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *CertificateInfo) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

// Used to construct SignatureVerifier.
type SignatureKeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AdminPublicKey *KeyInfo `protobuf:"bytes,1,opt,name=admin_public_key,json=adminPublicKey,proto3" json:"admin_public_key,omitempty"` // the public key owned by the administor.
	PrivateKey     *KeyInfo `protobuf:"bytes,2,opt,name=private_key,json=privateKey,proto3" json:"private_key,omitempty"`               // the private key from the user, used to sign messages.
	NodeId         int64    `protobuf:"varint,3,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`                          // the unique id of the replica or client.
}

func (x *SignatureKeyInfo) Reset() {
	*x = SignatureKeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_signature_info_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureKeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureKeyInfo) ProtoMessage() {}

func (x *SignatureKeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_signature_info_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureKeyInfo.ProtoReflect.Descriptor instead.
func (*SignatureKeyInfo) Descriptor() ([]byte, []int) {
	return file_signature_info_proto_rawDescGZIP(), []int{6}
}

func (x *SignatureKeyInfo) GetAdminPublicKey() *KeyInfo {
	if x != nil {
		return x.AdminPublicKey
	}
	return nil
}

func (x *SignatureKeyInfo) GetPrivateKey() *KeyInfo {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

func (x *SignatureKeyInfo) GetNodeId() int64 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

var File_signature_info_proto protoreflect.FileDescriptor

var file_signature_info_proto_rawDesc = []byte{
	0x0a, 0x14, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x72, 0x65, 0x73, 0x64, 0x62, 0x22, 0xc7, 0x01,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x3a, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x22, 0x43, 0x0a, 0x08, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x53, 0x41, 0x10,
	0x01, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x44, 0x32, 0x35, 0x35, 0x31, 0x39, 0x10, 0x02, 0x12, 0x0c,
	0x0a, 0x08, 0x43, 0x4d, 0x41, 0x43, 0x5f, 0x41, 0x45, 0x53, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05,
	0x45, 0x43, 0x44, 0x53, 0x41, 0x10, 0x04, 0x22, 0x87, 0x01, 0x0a, 0x09, 0x53, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62,
	0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x57, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x3a,
	0x0a, 0x09, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x68, 0x61, 0x73, 0x68, 0x54, 0x79, 0x70, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x12, 0x43,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x20, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x32, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x65, 0x73,
	0x64, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x70, 0x6f, 0x72, 0x74, 0x22, 0x1f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x4c, 0x49,
	0x45, 0x4e, 0x54, 0x10, 0x01, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x36, 0x0a, 0x0b, 0x63,
	0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x0f, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x34, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x43, 0x65,
	0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64,
	0x22, 0x96, 0x01, 0x0a, 0x10, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4b, 0x65,
	0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x38, 0x0a, 0x10, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x5f, 0x70,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x0e, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12,
	0x2f, 0x0a, 0x0b, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x64, 0x62, 0x2e, 0x4b, 0x65, 0x79,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x17, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f, 0x3b,
	0x72, 0x65, 0x73, 0x64, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_signature_info_proto_rawDescOnce sync.Once
	file_signature_info_proto_rawDescData = file_signature_info_proto_rawDesc
)

func file_signature_info_proto_rawDescGZIP() []byte {
	file_signature_info_proto_rawDescOnce.Do(func() {
		file_signature_info_proto_rawDescData = protoimpl.X.CompressGZIP(file_signature_info_proto_rawDescData)
	})
	return file_signature_info_proto_rawDescData
}

var file_signature_info_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_signature_info_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_signature_info_proto_goTypes = []interface{}{
	(SignatureInfo_HashType)(0),  // 0: resdb.SignatureInfo.HashType
	(CertificateKeyInfo_Type)(0), // 1: resdb.CertificateKeyInfo.Type
	(*SignatureInfo)(nil),        // 2: resdb.SignatureInfo
	(*SecretKey)(nil),            // 3: resdb.SecretKey
	(*KeyInfo)(nil),              // 4: resdb.KeyInfo
	(*CertificateKeyInfo)(nil),   // 5: resdb.CertificateKeyInfo
	(*CertificateKey)(nil),       // 6: resdb.CertificateKey
	(*CertificateInfo)(nil),      // 7: resdb.CertificateInfo
	(*SignatureKeyInfo)(nil),     // 8: resdb.SignatureKeyInfo
}
var file_signature_info_proto_depIdxs = []int32{
	0,  // 0: resdb.SignatureInfo.hash_type:type_name -> resdb.SignatureInfo.HashType
	0,  // 1: resdb.SecretKey.hash_type:type_name -> resdb.SignatureInfo.HashType
	0,  // 2: resdb.KeyInfo.hash_type:type_name -> resdb.SignatureInfo.HashType
	4,  // 3: resdb.CertificateKeyInfo.key:type_name -> resdb.KeyInfo
	1,  // 4: resdb.CertificateKeyInfo.type:type_name -> resdb.CertificateKeyInfo.Type
	5,  // 5: resdb.CertificateKey.public_key_info:type_name -> resdb.CertificateKeyInfo
	2,  // 6: resdb.CertificateKey.certificate:type_name -> resdb.SignatureInfo
	4,  // 7: resdb.CertificateInfo.admin_public_key:type_name -> resdb.KeyInfo
	6,  // 8: resdb.CertificateInfo.public_key:type_name -> resdb.CertificateKey
	4,  // 9: resdb.SignatureKeyInfo.admin_public_key:type_name -> resdb.KeyInfo
	4,  // 10: resdb.SignatureKeyInfo.private_key:type_name -> resdb.KeyInfo
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_signature_info_proto_init() }
func file_signature_info_proto_init() {
	if File_signature_info_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_signature_info_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SecretKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertificateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_signature_info_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureKeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_signature_info_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_signature_info_proto_goTypes,
		DependencyIndexes: file_signature_info_proto_depIdxs,
		EnumInfos:         file_signature_info_proto_enumTypes,
		MessageInfos:      file_signature_info_proto_msgTypes,
	}.Build()
	File_signature_info_proto = out.File
	file_signature_info_proto_rawDesc = nil
	file_signature_info_proto_goTypes = nil
	file_signature_info_proto_depIdxs = nil
}
